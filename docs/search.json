[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 patentsviewdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Oldham. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oldham P (2022). patentsviewdata: Package (One Line, Title Case). https://github.com/poldham/patentsviewdata, https://poldham.github.io/patentsviewdata/.","code":"@Manual{,   title = {patentsviewdata: What the Package Does (One Line, Title Case)},   author = {Paul Oldham},   year = {2022},   note = {https://github.com/poldham/patentsviewdata, https://poldham.github.io/patentsviewdata/}, }"},{"path":"/index.html","id":"patentsviewdata","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal patentsviewdata R package make easier download data files United States Patent Trademark Office (USPTO) PatentsView service. data download service involves multiple often large data files allow user construct complete US patent collection form useful data science. patentsview data package developed part WIPO patent analytics team’s efforts make patent data accessible. also complements open access patentsview API package accessible rOpenSci CRAN. don’t need full USPTO data suggest use PatentsView API package. package developed Paul Oldham part work WIPO Patent Analytics team. can find work WIPO Patent Analytics website including post step step guide functions written.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version patentsviewdata GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"poldham/patentsviewdata\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"What the Package Does (One Line, Title Case)","text":"three main functions package. pv_meta() pv_download() pv_import()","code":""},{"path":"/index.html","id":"pv_meta","dir":"","previous_headings":"Examples","what":"pv_meta()","title":"What the Package Does (One Line, Title Case)","text":"pv_meta() access patentsview metadata table applications grants website. function fetches either application grant table can see . also tidying data make easier access data download document datasets. applications (pregrants) grants page tables downloaded either working directory destination specify follows. destination folder already exist created. recommend specify grants pregrant applications folder. make life lot simpler later . meta data files able download files. key provide url vector urls file interested . can specify location download.","code":"applications_meta <- pv_meta(type = \"application\") grants_meta <- pv_meta(type = \"grant\")  # or make your life easier and specify a destination  applications_meta <- pv_meta(type = \"application\", dest = \"applications\") grants_meta <- pv_meta(type = \"grant\", dest = \"grants\")"},{"path":"/index.html","id":"pv_download","dir":"","previous_headings":"Examples","what":"pv_download()","title":"What the Package Does (One Line, Title Case)","text":"number large files internet connections vary risk connection time . handled timeout funtion. set 600 seconds (10 minutes) default may want change depending connection speed. now want download single file grants table. Note specify destination folder (created exist) strongly recommended. downloading entire collection applications grants turn lot files similar names fast. message see directory created doesnt exist see information size data. ℹ ‘grants’ dir created trying URL ‘https://s3.amazonaws.com/data.patentsview.org/download/application.tsv.zip’ Content type ‘binary/octet-stream’ length 81275891 bytes (77.5 MB) ================================================== downloaded 77.5 MB","code":"pv_download(grant_meta$url[1], dest = \"grants\")"},{"path":"/index.html","id":"pv_import","dir":"","previous_headings":"Examples","what":"pv_import()","title":"What the Package Does (One Line, Title Case)","text":"downloaded file can import pv_import(). files zipped download directly R object environment memory fail try files anyway. import file. Note importing applications file listed grants table pregrant table also contains applications table (choose destinations names accordingly). PatentsView data files tab delimited. PatentsView team done great job providing individual file import scripts R Python GitHub code snippets repo. can find full set R scripts . developing package focused consolidating imports using vroom package. However, run problems recommend reviewing R import scripts created PatentsView team doesnt work using data.table::fread() figure import table. recommend familiarise files going way downloading everything.","code":"applications <- pv_import(\"grants/application.tsv.zip\")"},{"path":"/index.html","id":"downloading-multiple-files","dir":"","previous_headings":"Examples","what":"Downloading Multiple Files","title":"What the Package Does (One Line, Title Case)","text":"think files might actually want. download files (including descriptions claims brief summary) need 128Gb space zipped files. Individual description files may go nearly 4Gb data files lot smaller . , make sure plenty disk space. illustrate creating small vector urls (first two urls grants_meta table. files downloaded ready imported. Note pv_download() function designed skip next url timeout reached. can mean file download may incomplete 10 minutes (timeout = 600) function skip . therefore important importing check getting number rows data recorded meta data table number_of_rows() (absence check sum). can handle import function specifying meta data data.frame (needs loaded environment). example, import one files just downloaded specify path metadata table (saved .rds pv_meta() function) receive informative message whether rows match. row count match receive suggestion try PatentsView code snippets fails datatable::fread(). ✓ Number Rows Matches expected 538617 ‘assignee’ metadata file file","code":"small <- grants_meta$url[1:2] # take the first two urls  # pass this into `pv_download()`  pv_download(small, dest = \"grants\", timeout = 600) library(tidyverse)  # import the file grants_assignees <-  pv_import(\"grants/assignee.tsv.zip\", meta_path = \"grants/grant_meta.rds\")"},{"path":"/index.html","id":"saving-files-as-different-types","dir":"","previous_headings":"Examples","what":"Saving files as different types","title":"What the Package Does (One Line, Title Case)","text":"PatentsView team done great job making data available form can readily accessed data scientists. However, may want save downloaded data different file formats suit needs. example, might want use newish qs package save smaller files super fast qs format, save standard rda rds save parquet use Apache Spark cluster. options handled save_as argument. file save see messages. ✓ Number Rows Matches expected 538617 ‘assignee’ metadata file file ✓ saved data ‘grants/assignee.parquet’ import file newish superfast qs format choose: Note qs functions intended used large datasets (benchmarked datasets 5 million rows 115Mb) aware . Parquet files written using arrow package can read follows.","code":"library(patentsviewdata) grants_assignees <-  pv_import(\"grants/assignee.tsv.zip\", meta_path = \"grants/grant_meta.rds\",                                 dest = \"grants\", save_as = \".qs\")  # or  grants_assignees <-  pv_import(\"grants/assignee.tsv.zip\", meta_path = \"grants/grant_meta.rds\",                                 dest = \"grants\", save_as = \".parquet\") library(qs)  assignee <- qread(\"grants/assignee.qs\") library(arrow)  assignee <- read_parquet(\"grants/assignee.parquet\")"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/pv_download.html","id":null,"dir":"Reference","previous_headings":"","what":"download patentsview files\nDownload one or mpre patentsview raw files — pv_download","title":"download patentsview files\nDownload one or mpre patentsview raw files — pv_download","text":"download patentsview files Download one mpre patentsview raw files","code":""},{"path":"/reference/pv_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download patentsview files\nDownload one or mpre patentsview raw files — pv_download","text":"","code":"pv_download(url = NULL, dest = NULL, timeout = 600)"},{"path":"/reference/pv_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download patentsview files\nDownload one or mpre patentsview raw files — pv_download","text":"url url file download dest destination files timeout time window download","code":""},{"path":[]},{"path":"/reference/pv_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — pv_import","title":"Title — pv_import","text":"Import PatentsView data table data download.","code":""},{"path":"/reference/pv_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — pv_import","text":"","code":"pv_import(path = NULL, meta_path = NULL, save_as = NULL, dest = NULL)"},{"path":"/reference/pv_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — pv_import","text":"path path file import meta_path path metadata file validate nrows import save_as file type save : \"rds\", \"rda\", \"qs\", \"csv\", \"parquet\" dest destination save_as, defaults working directory","code":""},{"path":"/reference/pv_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — pv_import","text":"data.frame","code":""},{"path":"/reference/pv_import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Title — pv_import","text":"function uses vroom package import tab separated files downloaded PatentsView data download site.","code":""},{"path":"/reference/pv_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Metadata for Patents View — pv_meta","title":"Import Metadata for Patents View — pv_meta","text":"Import Metadata Patents View","code":""},{"path":"/reference/pv_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Metadata for Patents View — pv_meta","text":"","code":"pv_meta(type = NULL, dest = NULL)"},{"path":"/reference/pv_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Metadata for Patents View — pv_meta","text":"type grant application (pregrant) table dest destination folder","code":""},{"path":"/reference/pv_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Metadata for Patents View — pv_meta","text":"data.frame","code":""},{"path":"/reference/pv_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Metadata for Patents View — pv_meta","text":"","code":"if (FALSE) applications_meta <- pv_meta(type = \"application\") grant_meta <- pv_meta(type = \"grant\") #> • change last update to data in standard format #> • split the file sizes into their own columns #> • add check for new elements or changes in the table"}]
